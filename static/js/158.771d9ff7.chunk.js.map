{"version":3,"file":"static/js/158.771d9ff7.chunk.js","mappings":"kOAQAA,EAAAA,GAAQC,SAASC,EAAAA,GAAYC,EAAAA,GAASC,EAAAA,IAEtC,MAAMC,EAAYC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wDAKtBC,EAAiBJ,EAAAA,GAAOC,IAAGI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,iFAM3BG,EAAU,CACdC,YAAa,EACbC,OAAQ,OAGJC,EAAU,CACd,CACEC,GAAI,SACJC,WAAY,SAAUC,GACpB,MAAM,IAAEC,GAAQD,EAEhBC,EAAIC,YAAc,gBAClBD,EAAIE,cAAgB,EACpBF,EAAIG,cAAgB,EACpBH,EAAII,WAAa,CACnB,IAwEJ,EApEcC,IAAqB,IAApB,WAAEC,GAAYD,EAC3B,MAAME,GAAeC,EAAAA,EAAAA,IAAc,CAAEC,SAAU,MACzCC,GAAeF,EAAAA,EAAAA,IAAc,CAAEC,SAAU,OAEzCE,EAAkBL,EAAWM,KAAKC,GAC/BA,EAAUC,QAGbC,EAAkBT,EAAWM,KAAKC,GAC/BA,EAAUG,QAGbC,EAAO,CACXC,OAAQ,GACRC,SAAU,CACR,CACEF,KAAM,GACNG,gBAAiB,MAKjBC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,IAEZ,IAAhBF,GACFJ,EAAKE,SAAS,GAAGF,KAAO,CAAC,GACzBA,EAAKE,SAAS,GAAGC,gBAAkB,CAAC,eAEpCH,EAAKE,SAAS,GAAGF,KAAON,EACxBM,EAAKE,SAAS,GAAGC,gBAAkBL,GAGrC,MAAMS,EAAcrC,EAAAA,GAAOC,IAAGqC,IAAAA,GAAAnC,EAAAA,EAAAA,GAAA,iFACnBiB,EAAe,QAAU,SACxBG,GAAgB,QAChBH,EAAe,QAAU,SACxBG,GAAgB,SAGvBgB,EAAkBvC,EAAAA,GAAOwC,KAAIC,IAAAA,GAAAtC,EAAAA,EAAAA,GAAA,mNAE1BiB,EAAe,QAAU,SACxBG,GAAgB,QAChBH,EAAe,OAAS,QACvBG,GAAgB,QAQ3B,OACEmB,EAAAA,EAAAA,KAAC3C,EAAS,CAAA4C,UACRC,EAAAA,EAAAA,MAACxC,EAAc,CAAAuC,SAAA,EACbD,EAAAA,EAAAA,KAACL,EAAW,CAAAM,UACVD,EAAAA,EAAAA,KAACG,EAAAA,GAAQ,CAACf,KAAMA,EAAMxB,QAASA,EAASG,QAASA,OAEnDmC,EAAAA,EAAAA,MAACL,EAAe,CAAAI,SAAA,CAAC,IAAET,EAAYY,QAAQ,UAE/B,E,8CC9FhB,MAAMC,EAAS,CACb,CACEC,MAAO,EACPC,MAAO,WAET,CACED,MAAO,EACPC,MAAO,YAET,CACED,MAAO,EACPC,MAAO,SAET,CACED,MAAO,EACPC,MAAO,SAET,CACED,MAAO,EACPC,MAAO,OAET,CACED,MAAO,EACPC,MAAO,QAET,CACED,MAAO,EACPC,MAAO,QAET,CACED,MAAO,EACPC,MAAO,UAET,CACED,MAAO,EACPC,MAAO,aAET,CACED,MAAO,GACPC,MAAO,WAET,CACED,MAAO,GACPC,MAAO,YAET,CACED,MAAO,GACPC,MAAO,aAILC,EAAQ,CACZ,CACEF,MAAO,KACPC,MAAO,QAET,CACED,MAAO,KACPC,MAAO,QAET,CACED,MAAO,KACPC,MAAO,QAET,CACED,MAAO,KACPC,MAAO,QAET,CACED,MAAO,KACPC,MAAO,SAIX,SAASE,IAIP,MAAO,CAAEC,OAHK,IAAIC,MAAOC,WAAa,EAGtBC,MAFH,IAAIF,MAAOG,cAG1B,CAEA,MAAMC,EAAgB,CACpBC,UAAYC,IAAM,IACbA,EACHC,MAAO,SAETC,QAASA,CAACF,EAAQG,KAAK,IAClBH,EACH1B,gBAAiB,sBACjB8B,YAAaD,EAAME,UAAY,QAAU,wBACzC,UAAW,CACTD,YAAa,SAEfE,UAAW,SAEbC,YAAcP,IAAM,IACfA,EACH9B,MAAO,UAETsC,OAAQA,CAACR,EAAQG,KAAK,IACjBH,EACH1B,gBAAiB6B,EAAMM,YAAc,wBACrCvC,MAAOiC,EAAMM,YAAc,mBAC3B,UAAW,CACTnC,gBAAiB,2BAGrBoC,KAAOV,IAAM,IACRA,EACHW,WACE,qGAIAvE,EAAYC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4QAkE5B,EAjD4BoE,KAC1B,MAAOnB,EAAOoB,IAAYC,EAAAA,EAAAA,UAAS,KAC5BlB,EAAMmB,IAAWD,EAAAA,EAAAA,UAAS,IAE3BE,GAAWC,EAAAA,EAAAA,MACXC,EAAc1B,IAiBpB,OAfA2B,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAO5B,IACbqB,EAASO,EAAK3B,OACdsB,EAAQK,EAAKxB,KAAK,GACjB,KAEHuB,EAAAA,EAAAA,YAAU,KACJ1B,EAAM4B,OAAS,GAAKzB,EAAKyB,OAAS,GAIpCL,GAASM,EAAAA,EAAAA,IAAyB,CAAE7B,QAAOG,SAC7C,GACC,CAACH,EAAOG,EAAMoB,KAGf/B,EAAAA,EAAAA,MAAC7C,EAAS,CAAA4C,SAAA,EACRD,EAAAA,EAAAA,KAACwC,EAAAA,GAAM,CACL5E,QAASyC,EACTY,OAAQF,EACR0B,aAAcA,IACZpC,EAAOqC,MAAMC,GAASA,EAAKrC,QAAU6B,EAAYzB,QAEnDkC,SAAWC,IACTf,EAASe,EAASvC,MAAM,KAG5BN,EAAAA,EAAAA,KAACwC,EAAAA,GAAM,CACL5E,QAAS4C,EACTS,OAAQF,EACR0B,aAAcA,IACZjC,EAAMkC,MAAMC,GAASA,EAAKrC,QAAU6B,EAAYtB,OAElD+B,SAAWE,IACTd,EAAQc,EAAQxC,MAAM,MAIhB,E,sCC5KhB,MAAMjD,EAAYC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uDAKtBsF,EAAUzF,EAAAA,GAAO0F,GAAErF,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,qJAQnBwF,EAAS3F,EAAAA,GAAO4F,GAAEtD,IAAAA,GAAAnC,EAAAA,EAAAA,GAAA,yEAMlB0F,EAAe7F,EAAAA,GAAO0F,GAAEjD,IAAAA,GAAAtC,EAAAA,EAAAA,GAAA,uDAKxB2F,EAAW9F,EAAAA,GAAOC,IAAG8F,IAAAA,GAAA5F,EAAAA,EAAAA,GAAA,kEAMrB6F,EAAQhG,EAAAA,GAAOwC,KAAIyD,IAAAA,GAAA9F,EAAAA,EAAAA,GAAA,2CAKnB+F,GAAOlG,EAAAA,GAAOwC,KAAI2D,IAAAA,GAAAhG,EAAAA,EAAAA,GAAA,yEAMlBiG,GAAMpG,EAAAA,GAAOwC,KAAI6D,IAAAA,GAAAlG,EAAAA,EAAAA,GAAA,yEAMjBmG,GAAUtG,EAAAA,GAAOwC,KAAI+D,IAAAA,GAAApG,EAAAA,EAAAA,GAAA,yEAMrBqG,GAAWxG,EAAAA,GAAOC,IAAGwG,IAAAA,GAAAtG,EAAAA,EAAAA,GAAA,+DAKrBuG,GAAS1G,EAAAA,GAAOC,IAAG0G,IAAAA,GAAAxG,EAAAA,EAAAA,GAAA,+DAKnByG,GAAY5G,EAAAA,GAAOwC,KAAIqE,IAAAA,GAAA1G,EAAAA,EAAAA,GAAA,yEAMvB2G,GAAc9G,EAAAA,GAAOwC,KAAIuE,IAAAA,GAAA5G,EAAAA,EAAAA,GAAA,uGAOzB6G,GAAYhH,EAAAA,GAAOwC,KAAIyE,IAAAA,GAAA9G,EAAAA,EAAAA,GAAA,sGA6F7B,GAtFwBe,IAAqB,IAApB,WAAEC,GAAYD,EACrC,MAAMgG,GAAgB7F,EAAAA,EAAAA,IAAc,CAAE8F,SAAU,OAE1CC,EAAWpH,EAAAA,GAAO4F,GAAEyB,IAAAA,GAAAlH,EAAAA,EAAAA,GAAA,4LAEb+G,EAAgB,SAAW,UAOlCI,EAAStH,EAAAA,GAAOC,IAAGsH,IAAAA,GAAApH,EAAAA,EAAAA,GAAA,+FAIZ+G,EAAgB,YAAc,QAGrCM,EAAmBxH,EAAAA,GAAOC,IAAGwH,IAAAA,GAAAtH,EAAAA,EAAAA,GAAA,8BACtB+G,EAAgB,sBAAwB,oBAG/CvF,GAAQQ,EAAAA,EAAAA,IAAYC,EAAAA,IACpBsF,GAAWvF,EAAAA,EAAAA,IAAYwF,EAAAA,IACvBC,GAASzF,EAAAA,EAAAA,IAAY0F,EAAAA,IAoB3B,OACEjF,EAAAA,EAAAA,MAAC7C,EAAS,CAAA4C,SAAA,EACRC,EAAAA,EAAAA,MAAC6C,EAAO,CAAA9C,SAAA,EACND,EAAAA,EAAAA,KAACiD,EAAM,CAAAhD,SAAC,cACRD,EAAAA,EAAAA,KAACiD,EAAM,CAAAhD,SAAC,WAEThB,EAAQ,GACPe,EAAAA,EAAAA,KAACmD,EAAY,CAAAlD,SACVxB,EAAWM,KAAKqG,IACflF,EAAAA,EAAAA,MAACwE,EAAQ,CAAAzE,SAAA,EACPC,EAAAA,EAAAA,MAACkD,EAAQ,CAAAnD,SAAA,EACPD,EAAAA,EAAAA,KAACsD,EAAK,CAAC+B,MAAO,CAAE9F,gBAAiB6F,EAASjG,UAC1Ca,EAAAA,EAAAA,KAACwD,GAAI,CAAAvD,SAAEmF,EAASE,WAElBtF,EAAAA,EAAAA,KAAC0D,GAAG,CAAAzD,SAAEmF,EAASnG,MAAMmB,QAAQ,aAKnCJ,EAAAA,EAAAA,KAAC8E,EAAgB,CAAA7E,UACfD,EAAAA,EAAAA,KAAC4D,GAAO,CAAA3D,SAAC,sDAGbC,EAAAA,EAAAA,MAAC0E,EAAM,CAAA3E,SAAA,EACLC,EAAAA,EAAAA,MAAC4D,GAAQ,CAAA7D,SAAA,EACPD,EAAAA,EAAAA,KAACkE,GAAS,CAAAjE,SAAC,eACXD,EAAAA,EAAAA,KAACoE,GAAW,CAAAnE,SAAE+E,EAAS5E,QAAQ,SAEjCF,EAAAA,EAAAA,MAAC8D,GAAM,CAAA/D,SAAA,EACLD,EAAAA,EAAAA,KAACkE,GAAS,CAAAjE,SAAC,aACXD,EAAAA,EAAAA,KAACsE,GAAS,CAAArE,SAAEiF,EAAO9E,QAAQ,aAGrB,E,sBCjKhB,MAAMmF,GAAUjI,EAAAA,GAAOkI,QAAOhI,KAAAA,IAAAC,EAAAA,EAAAA,GAAA,4BAQxBgI,IAAkBnI,EAAAA,EAAAA,KAJNkB,IAA8B,IAA7B,SAAEyB,EAAQ,UAAEyF,GAAWlH,EACxC,OAAOwB,EAAAA,EAAAA,KAAC2F,EAAAA,EAAY,CAACD,UAAWA,EAAUzF,SAAEA,GAAwB,GAG9C3C,CAAiBK,KAAAA,IAAAF,EAAAA,EAAAA,GAAA,qGAMnC2F,GAAW9F,EAAAA,GAAOC,IAAGqC,KAAAA,IAAAnC,EAAAA,EAAAA,GAAA,QAQ3B,MA4DA,GA5DsBmI,KACpB,MAAMlH,GAAeC,EAAAA,EAAAA,IAAc,CAAEC,SAAU,MACzCC,GAAeF,EAAAA,EAAAA,IAAc,CAAEC,SAAU,OAEzCvB,EAAYC,EAAAA,GAAOC,IAAGwC,KAAAA,IAAAtC,EAAAA,EAAAA,GAAA,qIAERiB,EAAe,SAAW,MACjCA,EAAe,iBAAmB,kBACjCG,GAAgB,uBACpBH,GAAgB,QAIpBmH,EAAQvI,EAAAA,GAAOwI,GAAEzC,KAAAA,IAAA5F,EAAAA,EAAAA,GAAA,0GAIHiB,EAAe,MAAQ,QAGrCqH,EAAYzI,EAAAA,GAAOC,IAAGgG,KAAAA,IAAA9F,EAAAA,EAAAA,GAAA,qDAEViB,GAAgB,SAG3BD,EAAYuH,IAAiBjE,EAAAA,EAAAA,UAAS,IAEvCkE,GAAoBxG,EAAAA,EAAAA,IAAYyG,EAAAA,IActC,OAZA9D,EAAAA,EAAAA,YAAU,KACR,GAAI6D,EAAkB3D,OAAS,EAAG,CAChC,MAAM6D,EAAgBF,EAAkBlH,KAAKC,IAC3C,MAAMG,EAtCd,WACE,MAAMiH,EAAcC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,IAElE,MAAO,IAAM,IAAIC,OAAO,EAAIL,EAAY9D,QAAU8D,CACpD,CAkCsBM,GAGd,MAAO,CAAEpB,KAFItG,EAAUsG,KAERrG,MADDD,EAAUC,MACFE,QAAO,IAE/B6G,EAAcG,EAChB,IACC,CAACF,KAGFjG,EAAAA,EAAAA,KAACyF,GAAe,CAAAxF,UACdD,EAAAA,EAAAA,KAACuF,GAAO,CAAAtF,UACNC,EAAAA,EAAAA,MAAC7C,EAAS,CAAA4C,SAAA,EACRC,EAAAA,EAAAA,MAACkD,GAAQ,CAAAnD,SAAA,EACPD,EAAAA,EAAAA,KAAC6F,EAAK,CAAA5F,SAAC,gBACPD,EAAAA,EAAAA,KAAC2G,EAAK,CAAClI,WAAYA,QAErByB,EAAAA,EAAAA,MAAC6F,EAAS,CAAA9F,SAAA,EACRD,EAAAA,EAAAA,KAAC6B,EAAmB,KAEpB7B,EAAAA,EAAAA,KAAC4G,GAAe,CAACnI,WAAYA,aAInB,C,uGCtFf,MAAMoI,EAAsBzF,GAAUA,EAAM0F,aAAaA,aAQnDC,EAAoB3F,GAC/BA,EAAM0F,aAAaA,aAAarI,WAErBuI,GAAsBC,EAAAA,EAAAA,IACjC,CAACF,IACAtI,GACQA,IA8CEyH,EAA2B9E,GACtCA,EAAM0F,aAAaI,QAAQjB,kBAEhBd,EAAuB/D,GAClCA,EAAM0F,aAAaI,QAAQC,cAEhBlC,EAAwB7D,GACnCA,EAAM0F,aAAaI,QAAQE,eAEhB1H,EAAqB0B,GAChCA,EAAM0F,aAAaI,QAAQ1H,W","sources":["components/Chart/Chart.jsx","components/StatisticsDashboard/StatisticsDashboard.jsx","components/StatisticsTable/StatisticsTable.jsx","pages/StatisticsTab/StatisticsTab.jsx","redux/transactions/selectors.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport { useSelector } from \"react-redux\";\nimport { selectPeriodTotal } from \"../../redux/transactions/selectors\";\nimport PropTypes from \"prop-types\";\nimport { useMediaQuery } from \"react-responsive\";\n\nChartJS.register(ArcElement, Tooltip, Legend);\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst ChartContainer = styled.div`\n  padding-bottom: 32px;\n  position: relative;\n  width: fit-content;\n`;\n\nconst options = {\n  borderWidth: 0,\n  cutout: \"72%\",\n};\n\nconst plugins = [\n  {\n    id: \"shadow\",\n    beforeDraw: function (chart) {\n      const { ctx } = chart;\n\n      ctx.shadowColor = \"rgba(0,0,0,1)\";\n      ctx.shadowOffsetX = 0;\n      ctx.shadowOffsetY = 0;\n      ctx.shadowBlur = 8;\n    },\n  },\n];\n\nconst Chart = ({ categories }) => {\n  const isMobileView = useMediaQuery({ maxWidth: 767 });\n  const isTabletView = useMediaQuery({ maxWidth: 1279 });\n\n  const categoriesTotal = categories.map((categorie) => {\n    return categorie.total;\n  });\n\n  const categoriesColor = categories.map((categorie) => {\n    return categorie.color;\n  });\n\n  const data = {\n    labels: [],\n    datasets: [\n      {\n        data: [],\n        backgroundColor: [],\n      },\n    ],\n  };\n\n  const periodTotal = useSelector(selectPeriodTotal);\n\n  if (periodTotal === 0) {\n    data.datasets[0].data = [1];\n    data.datasets[0].backgroundColor = [\"#00000026\"];\n  } else {\n    data.datasets[0].data = categoriesTotal;\n    data.datasets[0].backgroundColor = categoriesColor;\n  }\n\n  const StyledChart = styled.div`\n    width: ${isMobileView ? \"280px\" : \"336px\"};\n    width: ${!isTabletView && \"288px\"};\n    height: ${isMobileView ? \"280px\" : \"336px\"};\n    height: ${!isTabletView && \"288px\"};\n  `;\n\n  const InsideChartText = styled.span`\n    position: absolute;\n    top: ${isMobileView ? \"135px\" : \"165px\"};\n    top: ${!isTabletView && \"140px\"};\n    left: ${isMobileView ? \"50px\" : \"80px\"};\n    left: ${!isTabletView && \"55px\"};\n    font-weight: 600;\n    font-size: 18px;\n    line-height: 27px;\n    width: 180px;\n    text-align: center;\n  `;\n\n  return (\n    <Container>\n      <ChartContainer>\n        <StyledChart>\n          <Doughnut data={data} options={options} plugins={plugins} />\n        </StyledChart>\n        <InsideChartText>${periodTotal.toFixed(2)}</InsideChartText>\n      </ChartContainer>\n    </Container>\n  );\n};\n\nChart.propTypes = {\n  categories: PropTypes.array,\n};\n\nexport default Chart;","import styled from \"styled-components\";\nimport Select from \"react-select\";\nimport { useDispatch } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { fetchTransactionsSummary } from \"../../redux/transactions/operations\";\n\nconst months = [\n  {\n    value: 1,\n    label: \"January\",\n  },\n  {\n    value: 2,\n    label: \"February\",\n  },\n  {\n    value: 3,\n    label: \"March\",\n  },\n  {\n    value: 4,\n    label: \"April\",\n  },\n  {\n    value: 5,\n    label: \"May\",\n  },\n  {\n    value: 6,\n    label: \"June\",\n  },\n  {\n    value: 7,\n    label: \"July\",\n  },\n  {\n    value: 8,\n    label: \"August\",\n  },\n  {\n    value: 9,\n    label: \"September\",\n  },\n  {\n    value: 10,\n    label: \"October\",\n  },\n  {\n    value: 11,\n    label: \"November\",\n  },\n  {\n    value: 12,\n    label: \"December\",\n  },\n];\n\nconst years = [\n  {\n    value: 2020,\n    label: \"2020\",\n  },\n  {\n    value: 2021,\n    label: \"2021\",\n  },\n  {\n    value: 2022,\n    label: \"2022\",\n  },\n  {\n    value: 2023,\n    label: \"2023\",\n  },\n  {\n    value: 2024,\n    label: \"2024\",\n  },\n];\n\nfunction getCurrentDate() {\n  const month = new Date().getMonth() + 1;\n  const year = new Date().getFullYear();\n\n  return { month, year };\n}\n\nconst selectStyling = {\n  container: (styles) => ({\n    ...styles,\n    width: \"100%\",\n  }),\n  control: (styles, state) => ({\n    ...styles,\n    backgroundColor: \"rgba(74,86,226,0.1)\",\n    borderColor: state.isFocused ? \"white\" : \"rgba(255,255,255,0.6)\",\n    \"&:hover\": {\n      borderColor: \"white\",\n    },\n    boxShadow: \"none\",\n  }),\n  singleValue: (styles) => ({\n    ...styles,\n    color: \"white\",\n  }),\n  option: (styles, state) => ({\n    ...styles,\n    backgroundColor: state.isSelected && \"rgba(255,255,255,0.1)\",\n    color: state.isSelected && \"rgb(255,134,141)\",\n    \"&:hover\": {\n      backgroundColor: \"rgba(255,255,255,0.1)\",\n    },\n  }),\n  menu: (styles) => ({\n    ...styles,\n    background:\n      \"linear-gradient(to top, rgb(83, 61, 186), rgb(80, 48, 154), rgb(106, 70, 165), rgb(133,93,175))\",\n  }),\n};\n\nconst Container = styled.div`\n  display: flex;\n  padding-bottom: 20px;\n  width: 100%;\n  gap: 32px;\n\n  @media screen and (max-width: 768px) {\n    gap: 20px;\n    flex-direction: row;\n  }\n\n  @media screen and (max-width: 320px) {\n    flex-direction: column;\n    gap: 16px;\n  }\n`;\n\nconst StatisticsDashboard = () => {\n  const [month, setMonth] = useState(\"\");\n  const [year, setYear] = useState(\"\");\n\n  const dispatch = useDispatch();\n  const currentDate = getCurrentDate();\n\n  useEffect(() => {\n    const date = getCurrentDate();\n    setMonth(date.month);\n    setYear(date.year);\n  }, []);\n\n  useEffect(() => {\n    if (month.length > 0 && year.length > 0) {\n      //   console.log(\n      //     `transactions summary for the period ${month} ${year} has been requested`\n      //   );\n      dispatch(fetchTransactionsSummary({ month, year }));\n    }\n  }, [month, year, dispatch]);\n\n  return (\n    <Container>\n      <Select\n        options={months}\n        styles={selectStyling}\n        defaultValue={() =>\n          months.find((item) => item.value === currentDate.month)\n        }\n        onChange={(newMonth) => {\n          setMonth(newMonth.value);\n        }}\n      />\n      <Select\n        options={years}\n        styles={selectStyling}\n        defaultValue={() =>\n          years.find((item) => item.value === currentDate.year)\n        }\n        onChange={(newYear) => {\n          setYear(newYear.value);\n        }}\n      />\n      {/* <Test /> */}\n    </Container>\n  );\n};\n\nexport default StatisticsDashboard;\n","import PropTypes from \"prop-types\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectExpenseSummary,\n  selectIncomeSummary,\n  selectPeriodTotal,\n} from \"../../redux/transactions/selectors\";\nimport styled from \"styled-components\";\nimport { useMediaQuery } from \"react-responsive\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Columns = styled.ul`\n  display: flex;\n  justify-content: space-between;\n  padding: 16px;\n  background-color: rgba(82, 59, 126, 0.6);\n  border-radius: 8px;\n`;\n\nconst Column = styled.li`\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 24px;\n`;\n\nconst CategoryList = styled.ul`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst LeftSide = styled.div`\n  display: flex;\n  gap: 16px;\n  align-items: center;\n`;\n\nconst Color = styled.span`\n  width: 24px;\n  height: 24px;\n`;\n\nconst Name = styled.span`\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 21px;\n`;\n\nconst Sum = styled.span`\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 21px;\n`;\n\nconst Message = styled.span`\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 21px;\n`;\n\nconst Expenses = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Income = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst TotalName = styled.span`\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 21px;\n`;\n\nconst ExpensesSum = styled.span`\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 21px;\n  color: rgb(255, 134, 141);\n`;\n\nconst IncomeSum = styled.span`\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 21px;\n  color: rgb(255, 182, 39);\n`;\n\nconst StatisticsTable = ({ categories }) => {\n  const isDesktopView = useMediaQuery({ minWidth: 1280 });\n\n  const Category = styled.li`\n    height: 52px;\n    padding: ${isDesktopView ? \"0 28px\" : \"0 16px\"};\n    display: flex;\n    align-items: center;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n    justify-content: space-between;\n  `;\n\n  const Totals = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n    padding: ${isDesktopView ? \"16px 28px\" : \"16px\"};\n  `;\n\n  const MessageContainer = styled.div`\n    padding: ${isDesktopView ? \"28px 28px 12px 28px\" : \"16px 16px 0 16px\"};\n  `;\n\n  const total = useSelector(selectPeriodTotal);\n  const expenses = useSelector(selectExpenseSummary);\n  const income = useSelector(selectIncomeSummary);\n\n  // const categoryList = [\n  //   {\n  //     name: \"Main expenses\",\n  //     total: 8700,\n  //     color: \"rgb(254, 208,87)\",\n  //   },\n  //   {\n  //     name: \"Products\",\n  //     total: 3800.74,\n  //     color: \"rgb(255,216,208)\",\n  //   },\n  //   {\n  //     name: \"Car\",\n  //     total: 1500,\n  //     color: \"rgb(253,148,152)\",\n  //   },\n  // ];\n\n  return (\n    <Container>\n      <Columns>\n        <Column>Category</Column>\n        <Column>Sum</Column>\n      </Columns>\n      {total > 0 ? (\n        <CategoryList>\n          {categories.map((category) => (\n            <Category>\n              <LeftSide>\n                <Color style={{ backgroundColor: category.color }}></Color>\n                <Name>{category.name}</Name>\n              </LeftSide>\n              <Sum>{category.total.toFixed(2)}</Sum>\n            </Category>\n          ))}\n        </CategoryList>\n      ) : (\n        <MessageContainer>\n          <Message>You don't have any transactions in this period</Message>\n        </MessageContainer>\n      )}\n      <Totals>\n        <Expenses>\n          <TotalName>Expenses:</TotalName>\n          <ExpensesSum>{expenses.toFixed(2)}</ExpensesSum>\n        </Expenses>\n        <Income>\n          <TotalName>Income:</TotalName>\n          <IncomeSum>{income.toFixed(2)}</IncomeSum>\n        </Income>\n      </Totals>\n    </Container>\n  );\n};\n\nStatisticsTable.propTypes = {\n  categories: PropTypes.array,\n};\n\nexport default StatisticsTable;\n","import Chart from \"components/Chart/Chart\";\nimport styled from \"styled-components\";\nimport { CustomScroll } from \"react-custom-scroll\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectCategoriesSummary } from \"../../redux/transactions/selectors\";\nimport StatisticsDashboard from \"components/StatisticsDashboard/StatisticsDashboard\";\nimport StatisticsTable from \"components/StatisticsTable/StatisticsTable\";\nimport { useMediaQuery } from \"react-responsive\";\n\nconst Section = styled.section`\n  height: 100vh;\n`;\n\nconst Scrollbar = ({ children, className }) => {\n  return <CustomScroll className={className}>{children}</CustomScroll>;\n};\n\nconst StyledScrollbar = styled(Scrollbar)`\n  & > div > div > div > div > div.rcs-inner-handle {\n    background-color: #734aef;\n  }\n`;\n\nconst LeftSide = styled.div``;\n\nfunction generateRandomHexColor() {\n  const randomColor = Math.floor(Math.random() * 16777215).toString(16);\n\n  return \"#\" + \"0\".repeat(6 - randomColor.length) + randomColor;\n}\n\nconst StatisticsTab = () => {\n  const isMobileView = useMediaQuery({ maxWidth: 767 });\n  const isTabletView = useMediaQuery({ maxWidth: 1279 });\n\n  const Container = styled.div`\n    display: flex;\n    flex-direction: ${isMobileView ? \"column\" : \"row\"};\n    padding: ${isMobileView ? \"45px 20px 40px\" : \"20px 32px 13px\"};\n    padding: ${!isTabletView && \"32px 16px 46px 69px\"};\n    gap: ${!isMobileView && \"32px\"};\n    max-width: 800px;\n  `;\n\n  const Title = styled.h2`\n    font-weight: 400;\n    font-size: 30px;\n    line-height: 45px;\n    padding-bottom: ${isMobileView ? \"8px\" : \"20px\"};\n  `;\n\n  const RightSide = styled.div`\n    width: 100%;\n    padding-top: ${!isMobileView && \"20px\"};\n  `;\n\n  const [categories, setCategories] = useState([]);\n\n  const categoriesSummary = useSelector(selectCategoriesSummary);\n\n  useEffect(() => {\n    if (categoriesSummary.length > 0) {\n      const categorieList = categoriesSummary.map((categorie) => {\n        const color = generateRandomHexColor();\n        const name = categorie.name;\n        const total = categorie.total;\n        return { name, total, color };\n      });\n      setCategories(categorieList);\n    }\n  }, [categoriesSummary]);\n\n  return (\n    <StyledScrollbar>\n      <Section>\n        <Container>\n          <LeftSide>\n            <Title>Statistics</Title>\n            <Chart categories={categories} />\n          </LeftSide>\n          <RightSide>\n            <StatisticsDashboard />\n            {/* <Test /> */}\n            <StatisticsTable categories={categories} />\n          </RightSide>\n        </Container>\n      </Section>\n    </StyledScrollbar>\n  );\n};\n\nexport default StatisticsTab;\n","import { createSelector } from \"reselect\";\n\nexport const selectTransactions = (state) => state.transactions.transactions;\n// state.transactions.transactions.items;\n\nexport const selectLoading = (state) =>\n  state.transactions.transactions.isLoading;\n\nexport const selectError = (state) => state.transactions.transactions.error;\n\nexport const selectCategories = (state) =>\n  state.transactions.transactions.categories;\n\nexport const selectAllCategories = createSelector(\n  [selectCategories],\n  (categories) => {\n    return categories;\n  }\n);\n\nexport const selectFIltered = (state, sortCriteria) => {\n  const transactions = selectTransactions(state);\n  const categories = selectCategories(state);\n\n  const sortedTransactions = [...transactions];\n  switch (sortCriteria.value) {\n    case \"date\":\n      sortedTransactions.sort((a, b) => {\n        const dateA = new Date(a.transactionDate);\n        const dateB = new Date(b.transactionDate);\n\n        return sortCriteria.isReverse ? dateA - dateB : dateB - dateA;\n      });\n      break;\n    case \"amount\":\n      sortedTransactions.sort((a, b) => {\n        return sortCriteria.isReverse\n          ? b.amount - a.amount\n          : a.amount - b.amount;\n      });\n      break;\n    case \"category\":\n      sortedTransactions.sort((a, b) => {\n        const categoryA =\n          categories.find((cat) => cat.id === a.categoryId)?.name || \"\";\n        const categoryB =\n          categories.find((cat) => cat.id === b.categoryId)?.name || \"\";\n\n        return sortCriteria.isReverse\n          ? categoryB.localeCompare(categoryA)\n          : categoryA.localeCompare(categoryB);\n      });\n      break;\n    default:\n      return sortedTransactions.sort(\n        (a, b) => new Date(b.transactionDate) - new Date(a.transactionDate)\n      );\n  }\n\n  return sortedTransactions;\n};\n\nexport const selectCategoriesSummary = (state) =>\n  state.transactions.summary.categoriesSummary;\n\nexport const selectIncomeSummary = (state) =>\n  state.transactions.summary.incomeSummary;\n\nexport const selectExpenseSummary = (state) =>\n  state.transactions.summary.expenseSummary;\n\nexport const selectPeriodTotal = (state) =>\n  state.transactions.summary.periodTotal;\n\nexport const selectYear = (state) => state.transactions.summary.year;\n\nexport const selectMonth = (state) => state.transactions.summary.month;\n"],"names":["ChartJS","register","ArcElement","Tooltip","Legend","Container","styled","div","_templateObject","_taggedTemplateLiteral","ChartContainer","_templateObject2","options","borderWidth","cutout","plugins","id","beforeDraw","chart","ctx","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","_ref","categories","isMobileView","useMediaQuery","maxWidth","isTabletView","categoriesTotal","map","categorie","total","categoriesColor","color","data","labels","datasets","backgroundColor","periodTotal","useSelector","selectPeriodTotal","StyledChart","_templateObject3","InsideChartText","span","_templateObject4","_jsx","children","_jsxs","Doughnut","toFixed","months","value","label","years","getCurrentDate","month","Date","getMonth","year","getFullYear","selectStyling","container","styles","width","control","state","borderColor","isFocused","boxShadow","singleValue","option","isSelected","menu","background","StatisticsDashboard","setMonth","useState","setYear","dispatch","useDispatch","currentDate","useEffect","date","length","fetchTransactionsSummary","Select","defaultValue","find","item","onChange","newMonth","newYear","Columns","ul","Column","li","CategoryList","LeftSide","_templateObject5","Color","_templateObject6","Name","_templateObject7","Sum","_templateObject8","Message","_templateObject9","Expenses","_templateObject10","Income","_templateObject11","TotalName","_templateObject12","ExpensesSum","_templateObject13","IncomeSum","_templateObject14","isDesktopView","minWidth","Category","_templateObject15","Totals","_templateObject16","MessageContainer","_templateObject17","expenses","selectExpenseSummary","income","selectIncomeSummary","category","style","name","Section","section","StyledScrollbar","className","CustomScroll","StatisticsTab","Title","h2","RightSide","setCategories","categoriesSummary","selectCategoriesSummary","categorieList","randomColor","Math","floor","random","toString","repeat","generateRandomHexColor","Chart","StatisticsTable","selectTransactions","transactions","selectCategories","selectAllCategories","createSelector","summary","incomeSummary","expenseSummary"],"sourceRoot":""}